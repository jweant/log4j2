/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package log4j2; // NOSONAR

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class App {
	
	private static final Logger logger = LogManager.getLogger(App.class.getName());
	
	private static final String GREETING = "Hello world.";
	private static final String EXPENSIVE_OPERATION = "Not really expensive, but prooves a point.";
	private static final String SOME_DATA_SOURCE = "AwesomeDataSource";
	
    public String getGreeting() {
        return GREETING;
    }

    private static String expensiveOperation() {
    	return EXPENSIVE_OPERATION;
    }
    
    public static void main(String[] args) {
    	logger.traceEntry();
    	AnotherClass anotherClass = new AnotherClass();
    	Runtime rt = Runtime.getRuntime();
    	try {
			Process pr = rt.exec("cmd /c dir");
			
			  pr.waitFor(); 
		      BufferedReader reader=new BufferedReader(new InputStreamReader(
		                  pr.getInputStream())); 
		      String line; 
		      while((line = reader.readLine()) != null) { 
		        System.out.println(line); // NOSONAR
		      } 
		} catch (IOException | InterruptedException e) {
			// TODO Auto-generated catch block // NOSONAR
			e.printStackTrace();
		} 
    	
    	User user = new User("name1", "birthday1");
    	
    	logger.error("ERROR");
    	logger.fatal("FATAL");
    	logger.warn("Warning");
    	logger.info("This is the greeting {}", new App().getGreeting());
    	logger.trace("TRACE");
    	logger.debug("DEBUG");
  
    	// SonarQube warning disabled here because this is what this application does!
        System.out.println(new App().getGreeting()); // NOSONAR
        
        // This checks to see if isDebugEnabled twice, once to verify whether to call the functions
        //   another time to call the functions if debug is enabled
        if (logger.isDebugEnabled()) {
        	// SonarQube complains about this because no matter what the functions here will get called...
        	//  but they won't because we do the extra check...
            logger.debug("1. Logging in user " + user.getName() + " with birthday " + user.getBirthday()); //NOSONAR
        }
        //  the logging level will only be checked once and the String construction will only occur when debug logging is enabled.
        logger.debug("2. Logging in user {} with birthday {}", user.getName(), user.getBirthday());
        
        anotherClass.doSomething();
        
        logger.debug("Opening connection to {}...", SOME_DATA_SOURCE);
        logger.printf(Level.INFO, "Logging in user %1$s with birthday %2$tm %2$te,%2$tY", user.getName(), user.getBirthdayCalendar());
        
        // pre-Java 8 style optimization: explicitly check the log level
        // to make sure the expensiveOperation() method is only called if necessary
        if (logger.isTraceEnabled()) {
        	logger.trace("Some long-running operation returned {}", expensiveOperation());
        }
        // Java-8 style optimization: no need to explicitly check the log level:
        // the lambda expression is not evaluated if the TRACE level is not enabled
        // 		Disabling sonarqube cause I don't want to deal with it right now
        logger.trace("Some long-running operation returned {}", () -> expensiveOperation()); // NOSONAR
        
        LoggerObject.getInstance().print("This is to be printed to the LoggerObject class.");
        
        logger.traceExit();
    }

}
